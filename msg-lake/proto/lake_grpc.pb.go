// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/lake.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LakeClient is the client API for Lake service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LakeClient interface {
	PubSub(ctx context.Context, opts ...grpc.CallOption) (Lake_PubSubClient, error)
}

type lakeClient struct {
	cc grpc.ClientConnInterface
}

func NewLakeClient(cc grpc.ClientConnInterface) LakeClient {
	return &lakeClient{cc}
}

func (c *lakeClient) PubSub(ctx context.Context, opts ...grpc.CallOption) (Lake_PubSubClient, error) {
	stream, err := c.cc.NewStream(ctx, &Lake_ServiceDesc.Streams[0], "/Lake/PubSub", opts...)
	if err != nil {
		return nil, err
	}
	x := &lakePubSubClient{stream}
	return x, nil
}

type Lake_PubSubClient interface {
	Send(*PubSubReq) error
	Recv() (*PubSubRes, error)
	grpc.ClientStream
}

type lakePubSubClient struct {
	grpc.ClientStream
}

func (x *lakePubSubClient) Send(m *PubSubReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lakePubSubClient) Recv() (*PubSubRes, error) {
	m := new(PubSubRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LakeServer is the server API for Lake service.
// All implementations must embed UnimplementedLakeServer
// for forward compatibility
type LakeServer interface {
	PubSub(Lake_PubSubServer) error
	mustEmbedUnimplementedLakeServer()
}

// UnimplementedLakeServer must be embedded to have forward compatible implementations.
type UnimplementedLakeServer struct {
}

func (UnimplementedLakeServer) PubSub(Lake_PubSubServer) error {
	return status.Errorf(codes.Unimplemented, "method PubSub not implemented")
}
func (UnimplementedLakeServer) mustEmbedUnimplementedLakeServer() {}

// UnsafeLakeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LakeServer will
// result in compilation errors.
type UnsafeLakeServer interface {
	mustEmbedUnimplementedLakeServer()
}

func RegisterLakeServer(s grpc.ServiceRegistrar, srv LakeServer) {
	s.RegisterService(&Lake_ServiceDesc, srv)
}

func _Lake_PubSub_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LakeServer).PubSub(&lakePubSubServer{stream})
}

type Lake_PubSubServer interface {
	Send(*PubSubRes) error
	Recv() (*PubSubReq, error)
	grpc.ServerStream
}

type lakePubSubServer struct {
	grpc.ServerStream
}

func (x *lakePubSubServer) Send(m *PubSubRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lakePubSubServer) Recv() (*PubSubReq, error) {
	m := new(PubSubReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Lake_ServiceDesc is the grpc.ServiceDesc for Lake service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lake_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Lake",
	HandlerType: (*LakeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PubSub",
			Handler:       _Lake_PubSub_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/lake.proto",
}
